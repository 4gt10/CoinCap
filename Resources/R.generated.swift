//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Market Cap
      ///
      /// Key: assetDetails.item.marketCap.title
      ///
      /// Locales: en
      var assetDetailsItemMarketCapTitle: RswiftResources.StringResource { .init(key: "assetDetails.item.marketCap.title", tableName: "Localizable", source: source, developmentValue: "Market Cap", comment: nil) }

      /// en translation: Supply
      ///
      /// Key: assetDetails.item.supply.title
      ///
      /// Locales: en
      var assetDetailsItemSupplyTitle: RswiftResources.StringResource { .init(key: "assetDetails.item.supply.title", tableName: "Localizable", source: source, developmentValue: "Supply", comment: nil) }

      /// en translation: Volume (24h)
      ///
      /// Key: assetDetails.item.volume.title
      ///
      /// Locales: en
      var assetDetailsItemVolumeTitle: RswiftResources.StringResource { .init(key: "assetDetails.item.volume.title", tableName: "Localizable", source: source, developmentValue: "Volume (24h)", comment: nil) }

      /// en translation: Search
      ///
      /// Key: assets.searchBar.placeholder
      ///
      /// Locales: en
      var assetsSearchBarPlaceholder: RswiftResources.StringResource { .init(key: "assets.searchBar.placeholder", tableName: "Localizable", source: source, developmentValue: "Search", comment: nil) }

      /// en translation: Assets
      ///
      /// Key: assets.title
      ///
      /// Locales: en
      var assetsTitle: RswiftResources.StringResource { .init(key: "assets.title", tableName: "Localizable", source: source, developmentValue: "Assets", comment: nil) }

      /// en translation: OK
      ///
      /// Key: common.alert.action.ok
      ///
      /// Locales: en
      var commonAlertActionOk: RswiftResources.StringResource { .init(key: "common.alert.action.ok", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: Incorrect data. Please, try to reload the page later
      ///
      /// Key: error.incorrectData
      ///
      /// Locales: en
      var errorIncorrectData: RswiftResources.StringResource { .init(key: "error.incorrectData", tableName: "Localizable", source: source, developmentValue: "Incorrect data. Please, try to reload the page later", comment: nil) }

      /// en translation: Localizable
      ///
      /// Key: filename
      ///
      /// Locales: en
      var filename: RswiftResources.StringResource { .init(key: "filename", tableName: "Localizable", source: source, developmentValue: "Localizable", comment: nil) }

      /// en translation: Black
      ///
      /// Key: settings.icon.black.title
      ///
      /// Locales: en
      var settingsIconBlackTitle: RswiftResources.StringResource { .init(key: "settings.icon.black.title", tableName: "Localizable", source: source, developmentValue: "Black", comment: nil) }

      /// en translation: Icon
      ///
      /// Key: settings.icon.title
      ///
      /// Locales: en
      var settingsIconTitle: RswiftResources.StringResource { .init(key: "settings.icon.title", tableName: "Localizable", source: source, developmentValue: "Icon", comment: nil) }

      /// en translation: White
      ///
      /// Key: settings.icon.white.title
      ///
      /// Locales: en
      var settingsIconWhiteTitle: RswiftResources.StringResource { .init(key: "settings.icon.white.title", tableName: "Localizable", source: source, developmentValue: "White", comment: nil) }

      /// en translation: Yellow
      ///
      /// Key: settings.icon.yellow.title
      ///
      /// Locales: en
      var settingsIconYellowTitle: RswiftResources.StringResource { .init(key: "settings.icon.yellow.title", tableName: "Localizable", source: source, developmentValue: "Yellow", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: settings.title
      ///
      /// Locales: en
      var settingsTitle: RswiftResources.StringResource { .init(key: "settings.title", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: Your Watchlist will appear here
      ///
      /// Key: watchlist.empty.description
      ///
      /// Locales: en
      var watchlistEmptyDescription: RswiftResources.StringResource { .init(key: "watchlist.empty.description", tableName: "Localizable", source: source, developmentValue: "Your Watchlist will appear here", comment: nil) }

      /// en translation: No assets yet
      ///
      /// Key: watchlist.empty.title
      ///
      /// Locales: en
      var watchlistEmptyTitle: RswiftResources.StringResource { .init(key: "watchlist.empty.title", tableName: "Localizable", source: source, developmentValue: "No assets yet", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: watchlist.item.deleteAction.title
      ///
      /// Locales: en
      var watchlistItemDeleteActionTitle: RswiftResources.StringResource { .init(key: "watchlist.item.deleteAction.title", tableName: "Localizable", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Watchlist
      ///
      /// Key: watchlist.title
      ///
      /// Locales: en
      var watchlistTitle: RswiftResources.StringResource { .init(key: "watchlist.title", tableName: "Localizable", source: source, developmentValue: "Watchlist", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `negativeRed`.
    var negativeRed: RswiftResources.ColorResource { .init(name: "negativeRed", path: [], bundle: bundle) }

    /// Color `positiveGreen`.
    var positiveGreen: RswiftResources.ColorResource { .init(name: "positiveGreen", path: [], bundle: bundle) }

    /// Color `secondaryTextColor`.
    var secondaryTextColor: RswiftResources.ColorResource { .init(name: "secondaryTextColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 6 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `assets`.
    var assets: RswiftResources.ImageResource { .init(name: "assets", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `favorite.off`.
    var favoriteOff: RswiftResources.ImageResource { .init(name: "favorite.off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `favorite.on`.
    var favoriteOn: RswiftResources.ImageResource { .init(name: "favorite.on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `favorites`.
    var favorites: RswiftResources.ImageResource { .init(name: "favorites", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logoPlaceholder`.
    var logoPlaceholder: RswiftResources.ImageResource { .init(name: "logoPlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings`.
    var settings: RswiftResources.ImageResource { .init(name: "settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `AssetCell`.
    let assetCell: RswiftResources.ReuseIdentifier<AssetCell> = .init(identifier: "AssetCell")

    /// Reuse identifier `DetailCell`.
    let detailCell: RswiftResources.ReuseIdentifier<DetailCell> = .init(identifier: "DetailCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var assetDetailsViewController: RswiftResources.StoryboardViewControllerIdentifier<AssetDetailsViewController> { .init(identifier: "AssetDetailsViewController", storyboard: name, bundle: bundle) }
      var assetsViewController: RswiftResources.StoryboardViewControllerIdentifier<AssetsViewController> { .init(identifier: "AssetsViewController", storyboard: name, bundle: bundle) }
      var settingsIconViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingsIconViewController> { .init(identifier: "SettingsIconViewController", storyboard: name, bundle: bundle) }
      var settingsViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingsViewController> { .init(identifier: "SettingsViewController", storyboard: name, bundle: bundle) }
      var watchlistViewController: RswiftResources.StoryboardViewControllerIdentifier<WatchlistViewController> { .init(identifier: "WatchlistViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "secondaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryTextColor' is used in storyboard 'Main', but couldn't be loaded.") }
        if assetDetailsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'assetDetailsViewController' could not be loaded from storyboard 'Main' as 'AssetDetailsViewController'.") }
        if assetsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'assetsViewController' could not be loaded from storyboard 'Main' as 'AssetsViewController'.") }
        if settingsIconViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsIconViewController' could not be loaded from storyboard 'Main' as 'SettingsIconViewController'.") }
        if settingsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
        if watchlistViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'watchlistViewController' could not be loaded from storyboard 'Main' as 'WatchlistViewController'.") }
      }
    }
  }
}